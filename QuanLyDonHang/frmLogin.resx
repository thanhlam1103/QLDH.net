<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        dCI6IiJ9
</value>
  </data>
</root>